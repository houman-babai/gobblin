/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gobblin.example.mine;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogEvent\",\"namespace\":\"balaena.common.serde.avro\",\"fields\":[{\"name\":\"hostName\",\"type\":\"string\"},{\"name\":\"logType\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"level\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"body\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence hostName;
  @Deprecated public java.lang.CharSequence logType;
  @Deprecated public long time;
  @Deprecated public java.lang.CharSequence level;
  @Deprecated public java.lang.CharSequence hash;
  @Deprecated public java.lang.CharSequence body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public LogEvent() {}

  /**
   * All-args constructor.
   */
  public LogEvent(java.lang.CharSequence hostName, java.lang.CharSequence logType, java.lang.Long time, java.lang.CharSequence level, java.lang.CharSequence hash, java.lang.CharSequence body) {
    this.hostName = hostName;
    this.logType = logType;
    this.time = time;
    this.level = level;
    this.hash = hash;
    this.body = body;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hostName;
    case 1: return logType;
    case 2: return time;
    case 3: return level;
    case 4: return hash;
    case 5: return body;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hostName = (java.lang.CharSequence)value$; break;
    case 1: logType = (java.lang.CharSequence)value$; break;
    case 2: time = (java.lang.Long)value$; break;
    case 3: level = (java.lang.CharSequence)value$; break;
    case 4: hash = (java.lang.CharSequence)value$; break;
    case 5: body = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hostName' field.
   */
  public java.lang.CharSequence getHostName() {
    return hostName;
  }

  /**
   * Sets the value of the 'hostName' field.
   * @param value the value to set.
   */
  public void setHostName(java.lang.CharSequence value) {
    this.hostName = value;
  }

  /**
   * Gets the value of the 'logType' field.
   */
  public java.lang.CharSequence getLogType() {
    return logType;
  }

  /**
   * Sets the value of the 'logType' field.
   * @param value the value to set.
   */
  public void setLogType(java.lang.CharSequence value) {
    this.logType = value;
  }

  /**
   * Gets the value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'level' field.
   */
  public java.lang.CharSequence getLevel() {
    return level;
  }

  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(java.lang.CharSequence value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'hash' field.
   */
  public java.lang.CharSequence getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(java.lang.CharSequence value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'body' field.
   */
  public java.lang.CharSequence getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.lang.CharSequence value) {
    this.body = value;
  }

  /** Creates a new LogEvent RecordBuilder */
  public static gobblin.example.mine.LogEvent.Builder newBuilder() {
    return new gobblin.example.mine.LogEvent.Builder();
  }
  
  /** Creates a new LogEvent RecordBuilder by copying an existing Builder */
  public static gobblin.example.mine.LogEvent.Builder newBuilder(gobblin.example.mine.LogEvent.Builder other) {
    return new gobblin.example.mine.LogEvent.Builder(other);
  }
  
  /** Creates a new LogEvent RecordBuilder by copying an existing LogEvent instance */
  public static gobblin.example.mine.LogEvent.Builder newBuilder(gobblin.example.mine.LogEvent other) {
    return new gobblin.example.mine.LogEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for LogEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogEvent>
    implements org.apache.avro.data.RecordBuilder<LogEvent> {

    private java.lang.CharSequence hostName;
    private java.lang.CharSequence logType;
    private long time;
    private java.lang.CharSequence level;
    private java.lang.CharSequence hash;
    private java.lang.CharSequence body;

    /** Creates a new Builder */
    private Builder() {
      super(gobblin.example.mine.LogEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gobblin.example.mine.LogEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hostName)) {
        this.hostName = data().deepCopy(fields()[0].schema(), other.hostName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logType)) {
        this.logType = data().deepCopy(fields()[1].schema(), other.logType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.level)) {
        this.level = data().deepCopy(fields()[3].schema(), other.level);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hash)) {
        this.hash = data().deepCopy(fields()[4].schema(), other.hash);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.body)) {
        this.body = data().deepCopy(fields()[5].schema(), other.body);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing LogEvent instance */
    private Builder(gobblin.example.mine.LogEvent other) {
            super(gobblin.example.mine.LogEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.hostName)) {
        this.hostName = data().deepCopy(fields()[0].schema(), other.hostName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logType)) {
        this.logType = data().deepCopy(fields()[1].schema(), other.logType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.level)) {
        this.level = data().deepCopy(fields()[3].schema(), other.level);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hash)) {
        this.hash = data().deepCopy(fields()[4].schema(), other.hash);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.body)) {
        this.body = data().deepCopy(fields()[5].schema(), other.body);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'hostName' field */
    public java.lang.CharSequence getHostName() {
      return hostName;
    }
    
    /** Sets the value of the 'hostName' field */
    public gobblin.example.mine.LogEvent.Builder setHostName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.hostName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'hostName' field has been set */
    public boolean hasHostName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'hostName' field */
    public gobblin.example.mine.LogEvent.Builder clearHostName() {
      hostName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'logType' field */
    public java.lang.CharSequence getLogType() {
      return logType;
    }
    
    /** Sets the value of the 'logType' field */
    public gobblin.example.mine.LogEvent.Builder setLogType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.logType = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'logType' field has been set */
    public boolean hasLogType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'logType' field */
    public gobblin.example.mine.LogEvent.Builder clearLogType() {
      logType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'time' field */
    public java.lang.Long getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public gobblin.example.mine.LogEvent.Builder setTime(long value) {
      validate(fields()[2], value);
      this.time = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'time' field */
    public gobblin.example.mine.LogEvent.Builder clearTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'level' field */
    public java.lang.CharSequence getLevel() {
      return level;
    }
    
    /** Sets the value of the 'level' field */
    public gobblin.example.mine.LogEvent.Builder setLevel(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.level = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'level' field has been set */
    public boolean hasLevel() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'level' field */
    public gobblin.example.mine.LogEvent.Builder clearLevel() {
      level = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'hash' field */
    public java.lang.CharSequence getHash() {
      return hash;
    }
    
    /** Sets the value of the 'hash' field */
    public gobblin.example.mine.LogEvent.Builder setHash(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.hash = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'hash' field has been set */
    public boolean hasHash() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'hash' field */
    public gobblin.example.mine.LogEvent.Builder clearHash() {
      hash = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'body' field */
    public java.lang.CharSequence getBody() {
      return body;
    }
    
    /** Sets the value of the 'body' field */
    public gobblin.example.mine.LogEvent.Builder setBody(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.body = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'body' field has been set */
    public boolean hasBody() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'body' field */
    public gobblin.example.mine.LogEvent.Builder clearBody() {
      body = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public LogEvent build() {
      try {
        LogEvent record = new LogEvent();
        record.hostName = fieldSetFlags()[0] ? this.hostName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.logType = fieldSetFlags()[1] ? this.logType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.time = fieldSetFlags()[2] ? this.time : (java.lang.Long) defaultValue(fields()[2]);
        record.level = fieldSetFlags()[3] ? this.level : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.hash = fieldSetFlags()[4] ? this.hash : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.body = fieldSetFlags()[5] ? this.body : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
